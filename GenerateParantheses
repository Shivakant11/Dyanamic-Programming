class Solution {
    public List<String> generateParenthesis(int n) {
        
        List<String> list = new ArrayList<>();
        generateParenthesis(new StringBuilder(), n, 0, list);
        
        return list;
    }
    
    private void generateParenthesis(StringBuilder comb, int remainingP, int pToClose, List<String> list) {
        if(remainingP == 0 && pToClose == 0) {
            list.add(comb.toString());
            return;
        }
        
        if(remainingP > 0) {
            comb.append('(');
            generateParenthesis(comb, remainingP-1, pToClose+1, list);
            comb.deleteCharAt(comb.length()-1);
        }
        
        if (pToClose > 0) {
            comb.append(')');
            generateParenthesis(comb, remainingP, pToClose-1, list);
            comb.deleteCharAt(comb.length()-1);
        }
    }
}
